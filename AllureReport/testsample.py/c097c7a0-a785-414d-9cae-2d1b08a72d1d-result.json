{"name": "test_login", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message:", "trace": "setup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"f96145fb2dcb80184cc962630e6a5f13\")>\n\n    @pytest.mark.login\n    def test_login(setup):\n        print(setup)\n        lp = LoginPage(setup)\n>       lp.enter_username()\n\ntest_scripts\\Login\\test_login.py:13: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nPOM\\LoginPage.py:14: in enter_username\n    self.enter_text(username, Config.USERNAME)\nLibrary\\custom_wait.py:20: in wrapper2\n    w = wait.until(is_visible(self, element[0], element[1]))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <[AttributeError(\"'LoginPage' object has no attribute 'session_id'\") raised in repr()] WebDriverWait object at 0x2857c55d3c0>\nmethod = <function is_visible.<locals>.wrapper at 0x000002857C50DA20>, message = ''\n\n    def until(self, method, message: str = \"\"):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:95: TimeoutException"}, "attachments": [{"name": "stdout", "source": "da68f0b7-2b8c-467d-8e96-b2da71d4ff47-attachment.txt", "type": "text/plain"}], "start": 1701334039336, "stop": 1701334049773, "uuid": "73c22cd2-0ead-4030-a136-53ad6f936639", "historyId": "ac48d92986234a8665bf77eb6c4c51b6", "testCaseId": "e3987bf0d0e022b1fe4510db00e650a6", "fullName": "test_scripts.Login.test_login#test_login", "labels": [{"name": "tag", "value": "login"}, {"name": "parentSuite", "value": "test_scripts.Login"}, {"name": "suite", "value": "test_login"}, {"name": "host", "value": "SF-LAP-459"}, {"name": "thread", "value": "7948-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_scripts.Login.test_login"}]}